{% import "views/header.njk" as header %}
{% import "views/footer.njk" as footer %}

<!DOCTYPE html>
<html>
    <head>
        <title>{{serverName}}</title>
        
        <link rel="icon" type="image/png" href="/favicon.ico">
        
        {{headHTML | safe}}
        
        <style>{{customCSS | safe}}</style>
        <link rel="stylesheet" type="text/css" href="/static/css.css"></link>
        <meta charset="utf-8"/>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        
        
        {% block head %}
        {% endblock %}
        
        <script>
            function setAndCollect(destDiv,html) {
                destDiv.innerHTML = html;
                
                var parts = html.split('id="');
                parts.splice(0,1);
                parts = parts.map(s => s.split('"')[0]);
                
                var r = {};
                
                for ( var i in parts ) {
                    var id = parts[i];
                    let node = document.getElementById(id);
                    r[id] = node;
                    node.removeAttribute("id");
                }
                
                return r;
            }
            
            function http(url, a2, a3) {
                let cb = a2;
                let content = undefined;
                
                if (a3) {
                    cb = a3;
                    content = a2;
                }
                
                var xhttp = new XMLHttpRequest();
                xhttp.onreadystatechange = function (e) {
                    if (this.readyState == 4 && this.status == 200) {
                        cb && cb(e.target.responseText);
                    }
                };
                xhttp.open(content == undefined ? "GET" : "POST", url, true);
                xhttp.send(content);
            }
            
            document.addEventListener("DOMContentLoaded", function(event) {
                document.body.onclick = e => {
                    let toLike = e.target.getAttribute("toLike");
                    
                    if (toLike) {
                        http("/like", toLike, () => {});
                        
                        let likesDiv = document.getElementById(toLike + "_likes");
                        let likes = parseInt(likesDiv.innerHTML);
                        likesDiv.innerHTML = likes + 1;
                        
                        let threadDiv = document.getElementById(toLike + "_likeControls");
                        threadDiv.classList.remove("canLike");
                    }
                    
                    let toUnlike = e.target.getAttribute("toUnlike");
                    
                    if (toUnlike) {
                        http("/unlike", toUnlike, () => {});
                        
                        let likesDiv = document.getElementById(toUnlike + "_likes");
                        let likes = parseInt(likesDiv.innerHTML);
                        likesDiv.innerHTML = likes + -1;
                        
                        let threadDiv = document.getElementById(toUnlike + "_likeControls");
                        threadDiv.classList.add("canLike");
                    }
                    
                    let mediaToShow = e.target.getAttribute("showMedia");
                    
                    if (mediaToShow) {
                        let mediaDiv  = e.target.getAttribute("destination");
                        let mediaType = e.target.getAttribute("mediaType");
                        
                        let destination = document.getElementById(mediaDiv);
                        
                        if (destination.innerHTML == "") {
                            if (mediaType == "image") {
                                destination.innerHTML = `
                                    <img src="${mediaToShow}"/>
                                `;
                            } else if (mediaType == "iframe") {
                                destination.innerHTML = `
                                    <iframe src="${mediaToShow}" allowfullscreen></iframe>
                                `;
                            } else if (mediaType == "video") {
                                destination.innerHTML = `
                                    <video src="${mediaToShow}" controls/>
                                `;
                            }
                        } else {
                            destination.innerHTML = "";
                        }
                    }
                    
                    let toDisplay = e.target.getAttribute("toDisplay");
                    
                    if (toDisplay) {
                        let div = document.getElementById(toDisplay);
                        div.style.display = "block";
                    }
                    
                    let toHide = e.target.getAttribute("toHide");
                    
                    if (toHide) {
                        let div = document.getElementById(toHide);
                        div.style.display = "none";
                    }
                    
                    let toToggle = e.target.getAttribute("toToggle");
                    
                    if (toToggle) {
                        let div = document.getElementById(toToggle);
                        if (div.style.display == "none")
                            div.style.display = "block";
                        else
                            div.style.display = "none";
                    }
                    
                    let readedNotif = e.target.getAttribute("readedNotif");
                    
                    if (readedNotif) {
                        let div = document.getElementById(readedNotif + "_container");
                        div.classList.remove("unreadNotif");
                        http("/readNotification", readedNotif, () => {});
                    }
                }
            });
        </script>
    </head>
    <body>
        {% block header %}
            {{ header.renderHeader(utils, serverName, userName, notifCount, isAdmin, acceptSignUp) }}
        {% endblock %}
        
        <div class="pageContent">
            {% block body %}
            {% endblock %}
        </div>
        
        {% block footer %}
            <div class="footer">
                {% block beforeFooter %}{% endblock %}
                
                {{ footer.renderFooter(footerHTML) }}
                
                {% block afterFooter %}{% endblock %}
            </div>
        {% endblock %}
    </body>
</html>
